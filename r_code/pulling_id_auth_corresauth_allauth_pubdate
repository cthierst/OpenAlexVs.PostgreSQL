# Load the necessary libraries
library(tidyverse)  # For data manipulation
library(openalexR)  # For fetching data from OpenAlex API
library(writexl)    # For exporting data to Excel

# Set up email for OpenAlex API requests
options(openalexR.mailto = "coral.markan@mail.utoronto.ca")

# Fetch the data from OpenAlex API
springer_data <- oa_fetch(
  entity = "works", 
  locations.source.publisher_lineage = "https://openalex.org/P4310319965",  # Springer publisher
  from_publication_date = "2019-01-01",  # Starting date
  to_publication_date = "2024-12-31",    # Ending date
  corresponding_institution_ids = "https://openalex.org/I185261750",  # University of Toronto
  type = "article",
  output = "list"  # Fetch the data in list format
)

# If there is no data, stop the code
if (length(springer_data) == 0) {
  stop("No records found.")
}

# Print the number of publications found
print(paste("Found", length(springer_data), "publications."))

# Function to get the first author from each publication
get_first_author <- function(data) {
  first_authors <- vector("character", length(data))  # Empty list for first authors
  for (i in 1:length(data)) {  # Go through each record
    if (length(data[[i]]$authorships) > 0) {
      first_authors[i] <- data[[i]]$authorships[[1]]$author$display_name  # Get the first author's name
    } else {
      first_authors[i] <- NA  # If no authors, put NA
    }
  }
  return(first_authors)  # Return the list of first authors
}

# Function to get all authors from each publication
get_all_authors <- function(data) {
  all_authors <- vector("character", length(data))  # Empty list for all authors
  for (i in 1:length(data)) {  # Go through each record
    authorship_info <- data[[i]]$authorships  # Get authorship info for each record
    if (length(authorship_info) > 0) {
      author_names <- sapply(authorship_info, function(auth) {
        return(auth$author$display_name)  # Get each author's name
      })
      all_authors[i] <- paste(author_names, collapse = "; ")  # Combine names with semicolons
    } else {
      all_authors[i] <- NA  # If no authors, put NA
    }
  }
  return(all_authors)  # Return the list of all authors
}

# Function to get the corresponding author(s) from each publication
get_corresponding_author <- function(data) {
  corresponding_authors <- vector("character", length(data))  # Empty list for corresponding authors
  for (i in 1:length(data)) {  # Go through each record
    authorship_info <- data[[i]]$authorships  # Get authorship info for each record
    if (length(authorship_info) > 0) {
      cor_authors <- sapply(authorship_info, function(auth) {
        if (!is.null(auth$is_corresponding) && auth$is_corresponding == TRUE) {
          return(auth$author$display_name)  # Get corresponding author's name
        } else {
          return(NA)  # If not a corresponding author, return NA
        }
      })
      corresponding_authors[i] <- paste(cor_authors[!is.na(cor_authors)], collapse = "; ")  # Combine corresponding authors
    } else {
      corresponding_authors[i] <- NA  # If no corresponding authors, put NA
    }
  }
  return(corresponding_authors)  # Return the list of corresponding authors
}

# Function to get the publication date from each record
get_publication_date <- function(data) {
  publication_dates <- vector("character", length(data))  # Empty list for publication dates
  for (i in 1:length(data)) {  # Go through each record
    if (!is.null(data[[i]]$publication_date)) {
      publication_dates[i] <- data[[i]]$publication_date  # Get the publication date
    } else {
      publication_dates[i] <- NA  # If no publication date, put NA
    }
  }
  return(publication_dates)  # Return the list of publication dates
}

# Get the data we need from the records
first_authors <- get_first_author(springer_data)
all_authors <- get_all_authors(springer_data)
corresponding_authors <- get_corresponding_author(springer_data)
publication_dates <- get_publication_date(springer_data)

# Create a simple table with the required columns
final_table <- tibble(
  id = sapply(springer_data, function(x) x$id),  # Extract publication ID
  title = sapply(springer_data, function(x) x$title),  # Extract title
  first_author = first_authors,  # Extract first author
  all_authors = all_authors,  # Extract all authors
  corresponding_author = corresponding_authors,  # Extract corresponding author
  publication_date = publication_dates  # Extract publication date
)

# Export the data to an Excel file
write_xlsx(final_table, "springer_publications_full.xlsx")
print("Data exported to Excel successfully.")
